}
}
all.colnames_sheet.i=sheet.i.ls %>% lapply(colnames) %>% unlist() %>% unique()
colm.class.m=matrix(NA, ncol=length(collector.codes),
nrow=length(all.colnames_sheet.i)) %>%
`rownames<-`(all.colnames_sheet.i) %>%
`colnames<-`(collector.codes) %>%
as.data.frame()
for (k in 1:length(all.colnames_sheet.i)) { # para cada columna de la hoja i
# if (all.colnames_sheet.i=='Date') {
#
# }
for (j in 1:length(collector.codes)) { # nos fijamos la clase que esta tiene en el archivo j
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[collector.codes[j]]]) ) {
sheet_i.j_k.column.class=
sheet.i.ls[[collector.codes[j]]][,all.colnames_sheet.i[k]] %>% class()
}else{
# print(paste0('no column ', all.colnames_sheet.i[k],
#       ' in sheet ', sheet.names[i], ' for collector ', collector.codes[j]))
sheet_i.j_k.column.class=NA
}
colm.class.m[all.colnames_sheet.i[k], collector.codes[j]]=sheet_i.j_k.column.class[1]
}
# sheet.i.ls %>%
#   lapply(as.data.frame) %>%
#   apply(FUN=dplyr::select(), 1)
# col.class=function(x, colname){
#   as.data.frame(x)
#   # return(x [,colname] %>%  class())
# }
#
# sheet.i.ls %>%
#   # lapply(colnames) %>%
#   lapply(col.class(x=.))
}
print(colm.class.m)
#
stacked.sheet.i=bind_rows(sheet.i.ls)
#
# stacked.sheets.ls[[i]]=stacked.sheet.i
}
library(data.table) # list
rbindlist(sheet.i.ls)
stacked.sheet.i=rbindlist(sheet.i.ls, fill=T, use.names = T)
colm.class.m
sheet.i.ls[[collector.codes[j]]]
sheet.i.ls[[collector.codes[j]]][,3]
sheet.i.ls[[collector.codes[j]]]
sheet.i.ls[[1:2]]
sheet.i.ls[1:2]
sheet.i.ls[1:2][,1]
sheet.i.ls[1:2][1]
all.colnames_sheet.i
k=11
colm.class.m
colm.class.m
unique(colm.class.m[k,]
)
colm.class.m[k,]
unique(colm.class.m[k,])
unique(colm.class.m[k,] %>% `names<-`(NULL))
unique(colm.class.m[k,] %>% c())
colm.class.m[k,]
colm.class.m[k,] %>% c()
colm.class.m[k,] %>% c() %>% class()
colm.class.m[k,] %>% class
colm.class.m[k,] %>% c() %>% unlist()
unique(colm.class.m[k,] %>% c() %>% unlist())
colm.class.m[k,] %>%
c() %>%
unlist() %>%
unique() %>%
length()
s=1
sheet.s=sheet.i.ls[[s]]
sheet.s %>% class()
sheet.s=sheet.i.ls[[s]] %>%
as.data.frame()
k
all.colnames_sheet.i[k]
sheet.i.ls[[s]] %>%
as.data.frame() %>%
mutate(all.colnames_sheet.i[k]=as.character(all.colnames_sheet.i[k]))
sheet.i.ls[[s]] %>%
as.data.frame()
sheet.i.ls[[s]] %>%
as.data.frame() %>% Vire
sheet.i.ls[[s]] %>%
as.data.frame() %>% View
sheet.i.ls[[s]][,all.colnames_sheet.i[k]]
sheet.i.ls %>% names()
sheet.i
message(paste0(all.colnames_sheet.i[k], ' column of ', sheet.i, ' sheet coerced to character since more than one class were detected'))
message(paste0('More than one class detected in column ', all.colnames_sheet.i[k], ' of ', sheet.i, ' sheet. All values coerced to character.'))
message(paste0('More than one class detected in column `', all.colnames_sheet.i[k], '` of `', sheet.i, '` sheet. All values coerced to character.'))
message(paste0('More than one class among collector`s tables detected in column `', all.colnames_sheet.i[k], '` of `', sheet.i, '` sheet. All values coerced to character.'))
message(paste0('More than one class detected among collector`s sheet `', sheet.i, '` in column `', all.colnames_sheet.i[k], '. All values coerced to character.'))
message(paste0('More than one class detected among collector`s sheet `', sheet.i, '` at column `', all.colnames_sheet.i[k], '`. All values coerced to character.'))
message(paste0('More than one class detected among collector`s sheet `', sheet.i, '` at column `', all.colnames_sheet.i[k], '`. All values coerced to character for that column.'))
stacked.sheets.ls=list()
for (i in 1:length(sheet.names)) { # para cada hoja
sheet.i=sheet.names[i] # hoja correspondiente
message(paste0('
', sheet.i))
# lsita de esa hoja, con cada elemento viniendo de un collector diferente
sheet.i.ls=list()
coll.idx=1
for (j in 1:length(collector.codes)) { # para cada colector
message(collector.codes[j])
excel.j_sheet.i=excel.ls[[j]][[sheet.i]] # tomamos la hoja i del colector j
if (!is.null(excel.j_sheet.i)) { # si la hoja i está en el archivo del colector j
excel.j_sheet.i=excel.j_sheet.i %>%
mutate(coll_id=collector.codes[j]) # agregamos un identificador
sheet.i.ls[[coll.idx]] = excel.j_sheet.i # y la agregamos a la lista de esa hoja
names(sheet.i.ls)[coll.idx]=collector.codes[j] # la nombramos
coll.idx=coll.idx+1
}
}
all.colnames_sheet.i=sheet.i.ls %>% lapply(colnames) %>% unlist() %>% unique()
colm.class.m=matrix(NA, ncol=length(collector.codes),
nrow=length(all.colnames_sheet.i)) %>%
`rownames<-`(all.colnames_sheet.i) %>%
`colnames<-`(collector.codes) %>%
as.data.frame()
for (k in 1:length(all.colnames_sheet.i)) { # para cada columna de la hoja i
for (j in 1:length(collector.codes)) { # nos fijamos la clase que esta tiene en el archivo j
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[collector.codes[j]]]) ) {
sheet_i.j_k.column.class=
sheet.i.ls[[collector.codes[j]]][,all.colnames_sheet.i[k]] %>% class()
}else{
# print(paste0('no column ', all.colnames_sheet.i[k],
#       ' in sheet ', sheet.names[i], ' for collector ', collector.codes[j]))
sheet_i.j_k.column.class=NA
}
colm.class.m[all.colnames_sheet.i[k], collector.codes[j]]=sheet_i.j_k.column.class[1]
}
if (colm.class.m[k,] %>% # si hay mas de una clase en esa columna entre colectores
c() %>%
unlist() %>%
unique() %>%
length() != 1
) {
for (s in 1:length(sheet.i.ls)) { # transformar esa columna a character en cada hoja
# sheet.s=sheet.i.ls[[s]] %>%
#   as.data.frame()
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[s]])) {
sheet.i.ls[[s]][,all.colnames_sheet.i[k]] =
as.character(sheet.i.ls[[s]][,all.colnames_sheet.i[k]])
}
}
message(paste0('More than one class detected among collector`s sheet `', sheet.i, '` at column `', all.colnames_sheet.i[k], '`. All values coerced to character for that column.'))
}
# sheet.i.ls %>%
#   lapply(as.data.frame) %>%
#   apply(FUN=dplyr::select(), 1)
# col.class=function(x, colname){
#   as.data.frame(x)
#   # return(x [,colname] %>%  class())
# }
#
# sheet.i.ls %>%
#   # lapply(colnames) %>%
#   lapply(col.class(x=.))
}
print(colm.class.m)
#
# stacked.sheet.i=bind_rows(sheet.i.ls)
stacked.sheet.i=rbindlist(sheet.i.ls, fill=T, use.names = T)
#
# stacked.sheets.ls[[i]]=stacked.sheet.i
}
names(stacked.sheets.ls)=sheet.names
sheet.names
for (i in 1:length(sheet.names)) { # para cada hoja
sheet.i=sheet.names[i] # hoja correspondiente
message(paste0('
', sheet.i))
# lsita de esa hoja, con cada elemento viniendo de un collector diferente
sheet.i.ls=list()
coll.idx=1
for (j in 1:length(collector.codes)) { # para cada colector
message(collector.codes[j])
excel.j_sheet.i=excel.ls[[j]][[sheet.i]] # tomamos la hoja i del colector j
if (!is.null(excel.j_sheet.i)) { # si la hoja i está en el archivo del colector j
excel.j_sheet.i=excel.j_sheet.i %>%
mutate(coll_id=collector.codes[j]) # agregamos un identificador
sheet.i.ls[[coll.idx]] = excel.j_sheet.i # y la agregamos a la lista de esa hoja
names(sheet.i.ls)[coll.idx]=collector.codes[j] # la nombramos
coll.idx=coll.idx+1
}
}
all.colnames_sheet.i=sheet.i.ls %>% lapply(colnames) %>% unlist() %>% unique()
colm.class.m=matrix(NA, ncol=length(collector.codes),
nrow=length(all.colnames_sheet.i)) %>%
`rownames<-`(all.colnames_sheet.i) %>%
`colnames<-`(collector.codes) %>%
as.data.frame()
for (k in 1:length(all.colnames_sheet.i)) { # para cada columna de la hoja i
for (j in 1:length(collector.codes)) { # nos fijamos la clase que esta tiene en el archivo j
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[collector.codes[j]]]) ) {
sheet_i.j_k.column.class=
sheet.i.ls[[collector.codes[j]]][,all.colnames_sheet.i[k]] %>% class()
}else{
# print(paste0('no column ', all.colnames_sheet.i[k],
#       ' in sheet ', sheet.names[i], ' for collector ', collector.codes[j]))
sheet_i.j_k.column.class=NA
}
colm.class.m[all.colnames_sheet.i[k], collector.codes[j]]=sheet_i.j_k.column.class[1]
}
if (colm.class.m[k,] %>% # si hay mas de una clase en esa columna entre colectores
c() %>%
unlist() %>%
unique() %>%
length() != 1
) {
for (s in 1:length(sheet.i.ls)) { # transformar esa columna a character en cada hoja
# sheet.s=sheet.i.ls[[s]] %>%
#   as.data.frame()
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[s]])) {
sheet.i.ls[[s]][,all.colnames_sheet.i[k]] =
as.character(sheet.i.ls[[s]][,all.colnames_sheet.i[k]])
}
}
message(paste0('More than one class detected among collector`s sheet `', sheet.i, '` at column `', all.colnames_sheet.i[k], '`. All values coerced to character for that column.'))
}
# sheet.i.ls %>%
#   lapply(as.data.frame) %>%
#   apply(FUN=dplyr::select(), 1)
# col.class=function(x, colname){
#   as.data.frame(x)
#   # return(x [,colname] %>%  class())
# }
#
# sheet.i.ls %>%
#   # lapply(colnames) %>%
#   lapply(col.class(x=.))
}
print(colm.class.m)
#
# stacked.sheet.i=bind_rows(sheet.i.ls)
stacked.sheet.i=rbindlist(sheet.i.ls, fill=T, use.names = T)
#
stacked.sheets.ls[[i]]=stacked.sheet.i
}
knitr::opts_chunk$set(echo = TRUE)
library(readxl) # read
library(xlsx) # write
library(tidyr)
library(dplyr)
library(ggplot2)
library(data.table) # rbindlist()
# archivos excel de entrada
input.filenames=c("Data_MoralesCL_octubre 2020.xlsx",
"Data_ArbetmanMP25ene21.xlsx",
"Data_EEZ.xlsx",
"Data_Victoria_Campopiano.xlsx")
# códigos para los colectores
collector.codes=c('CLM', 'MPA', 'EEZ', 'VCR') # caro, maru, edu y vicky
# sheet names
sheet.names.ls=lapply(input.filenames, excel_sheets) %>%
`names<-`(collector.codes)
# uinque sheet names
sheet.names=unlist(sheet.names.ls) %>% unique()
# para cada uno de los infputfiles (1 por colector) quiero una lista de tablas 'sheets.ls'
# cada una correspondiendo a una hoja del excel de ese colector
# estas listas estarán dentro de otra 'lista excel.ls'
excel.ls=list()
for (i in 1:length(input.filenames)) { # loop a lo largo de los archivos de entrada (4 en este caso)
message(paste0('File:   ', input.filenames[i])) # mensaje en consola para seguir la importación
# Se busacn las hojas del excel existentes en el archivo i
sheet.names.i=excel_sheets(input.filenames[i])
# En el siguiente loop, cada una de estas es imoporatda a un data.frame
# y se guarda en una lista 'sheets.ls.i'
sheets.ls.i=list()
for (j in 1:length(sheet.names.i)) {
message(paste0('    ', sheet.names.i[j])) # mensaje en consola para seguimiento
# lectura del archivo .xlsx del colector i, e importación de la hoja j
sheet.i=read_xlsx(input.filenames[i], sheet = sheet.names.i[j]) %>%
as.data.frame()# %>% # forzamos clase data.frame
# ¡¡¡¡¡¡¡¡¡¡¡¡ CONVIERTO TODA COLUMNA EN CLASE CHARACTER !!!!!!!!!!!!!
# mutate(across(everything(), as.character))
print(colnames(sheet.i)) # mensaje para ver las columnas de cada hoja de cada excel
sheets.ls.i[[j]]=sheet.i # guarda cada hoja en la lista del colector i
}
names(sheets.ls.i)=sheet.names.i # asigna nombres a los elementos (data.frames en este caso) de la lista
excel.ls[[i]]=sheets.ls.i # garda la lsita de hojas del colector i en la meta-lista excel.ls
}
names(excel.ls)=collector.codes # asgina nombres a los elementos de la meta lista excel.ls
stacked.sheets.ls=list()
for (i in 1:length(sheet.names)) { # para cada hoja
sheet.i=sheet.names[i] # hoja correspondiente
message(paste0('
', sheet.i))
# lsita de esa hoja, con cada elemento viniendo de un collector diferente
sheet.i.ls=list()
coll.idx=1
for (j in 1:length(collector.codes)) { # para cada colector
message(collector.codes[j])
excel.j_sheet.i=excel.ls[[j]][[sheet.i]] # tomamos la hoja i del colector j
if (!is.null(excel.j_sheet.i)) { # si la hoja i está en el archivo del colector j
excel.j_sheet.i=excel.j_sheet.i %>%
mutate(coll_id=collector.codes[j]) # agregamos un identificador
sheet.i.ls[[coll.idx]] = excel.j_sheet.i # y la agregamos a la lista de esa hoja
names(sheet.i.ls)[coll.idx]=collector.codes[j] # la nombramos
coll.idx=coll.idx+1
}
}
all.colnames_sheet.i=sheet.i.ls %>% lapply(colnames) %>% unlist() %>% unique()
colm.class.m=matrix(NA, ncol=length(collector.codes),
nrow=length(all.colnames_sheet.i)) %>%
`rownames<-`(all.colnames_sheet.i) %>%
`colnames<-`(collector.codes) %>%
as.data.frame()
for (k in 1:length(all.colnames_sheet.i)) { # para cada columna de la hoja i
for (j in 1:length(collector.codes)) { # nos fijamos la clase que esta tiene en el archivo j
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[collector.codes[j]]]) ) {
sheet_i.j_k.column.class=
sheet.i.ls[[collector.codes[j]]][,all.colnames_sheet.i[k]] %>% class()
}else{
# print(paste0('no column ', all.colnames_sheet.i[k],
#       ' in sheet ', sheet.names[i], ' for collector ', collector.codes[j]))
sheet_i.j_k.column.class=NA
}
colm.class.m[all.colnames_sheet.i[k], collector.codes[j]]=sheet_i.j_k.column.class[1]
}
if (colm.class.m[k,] %>% # si hay mas de una clase en esa columna entre colectores
c() %>%
unlist() %>%
unique() %>%
length() != 1
) {
for (s in 1:length(sheet.i.ls)) { # transformar esa columna a character en cada hoja
# sheet.s=sheet.i.ls[[s]] %>%
#   as.data.frame()
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[s]])) {
sheet.i.ls[[s]][,all.colnames_sheet.i[k]] =
as.character(sheet.i.ls[[s]][,all.colnames_sheet.i[k]])
}
}
message(paste0('More than one class detected among collector`s sheet `', sheet.i, '` at column `', all.colnames_sheet.i[k], '`. All values coerced to character for that column.'))
}
# sheet.i.ls %>%
#   lapply(as.data.frame) %>%
#   apply(FUN=dplyr::select(), 1)
# col.class=function(x, colname){
#   as.data.frame(x)
#   # return(x [,colname] %>%  class())
# }
#
# sheet.i.ls %>%
#   # lapply(colnames) %>%
#   lapply(col.class(x=.))
}
print(colm.class.m)
#
# stacked.sheet.i=bind_rows(sheet.i.ls)
stacked.sheet.i=rbindlist(sheet.i.ls, fill=T, use.names = T)
#
stacked.sheets.ls[[i]]=stacked.sheet.i
}
names(stacked.sheets.ls)=sheet.names
colm.class.m %>%
knitr::kable()
stacked.sheets.ls=list()
for (i in 1:length(sheet.names)) { # para cada hoja
sheet.i=sheet.names[i] # hoja correspondiente
# message(paste0('                           ', sheet.i))
# lsita de esa hoja, con cada elemento viniendo de un collector diferente
sheet.i.ls=list()
coll.idx=1
for (j in 1:length(collector.codes)) { # para cada colector
# message(collector.codes[j])
excel.j_sheet.i=excel.ls[[j]][[sheet.i]] # tomamos la hoja i del colector j
if (!is.null(excel.j_sheet.i)) { # si la hoja i está en el archivo del colector j
excel.j_sheet.i=excel.j_sheet.i %>%
mutate(coll_id=collector.codes[j]) # agregamos un identificador
sheet.i.ls[[coll.idx]] = excel.j_sheet.i # y la agregamos a la lista de esa hoja
names(sheet.i.ls)[coll.idx]=collector.codes[j] # la nombramos
coll.idx=coll.idx+1
}
}
all.colnames_sheet.i=sheet.i.ls %>% lapply(colnames) %>% unlist() %>% unique()
colm.class.m=matrix(NA, ncol=length(collector.codes),
nrow=length(all.colnames_sheet.i)) %>%
`rownames<-`(all.colnames_sheet.i) %>%
`colnames<-`(collector.codes) %>%
as.data.frame()
for (k in 1:length(all.colnames_sheet.i)) { # para cada columna de la hoja i
for (j in 1:length(collector.codes)) { # nos fijamos la clase que esta tiene en el archivo j
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[collector.codes[j]]]) ) {
sheet_i.j_k.column.class=
sheet.i.ls[[collector.codes[j]]][,all.colnames_sheet.i[k]] %>% class()
}else{
# print(paste0('no column ', all.colnames_sheet.i[k],
#       ' in sheet ', sheet.names[i], ' for collector ', collector.codes[j]))
sheet_i.j_k.column.class=NA
}
colm.class.m[all.colnames_sheet.i[k], collector.codes[j]]=sheet_i.j_k.column.class[1]
}
# sheet.i.ls %>%
#   lapply(as.data.frame) %>%
#   apply(FUN=dplyr::select(), 1)
# col.class=function(x, colname){
#   as.data.frame(x)
#   # return(x [,colname] %>%  class())
# }
#
# sheet.i.ls %>%
#   # lapply(colnames) %>%
#   lapply(col.class(x=.))
}
for (k in 1:length(all.colnames_sheet.i)) {
if (colm.class.m[k,] %>% # si hay mas de una clase en esa columna entre colectores
c() %>%
unlist() %>%
unique() %>%
length() != 1
) {
for (s in 1:length(sheet.i.ls)) { # transformar esa columna a character en cada hoja
# sheet.s=sheet.i.ls[[s]] %>%
#   as.data.frame()
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[s]])) {
sheet.i.ls[[s]][,all.colnames_sheet.i[k]] =
as.character(sheet.i.ls[[s]][,all.colnames_sheet.i[k]])
}
}
# message(paste0(all.colnames_sheet.i[k], ' coerced to character.'))
colm.class.m$`Coerced to`=NA
colm.class.m$`Coerced to`[k]='character'
}
}
# print(colm.class.m)
colm.class.m %>%
knitr::kable()
#
# stacked.sheet.i=bind_rows(sheet.i.ls)
stacked.sheet.i=rbindlist(sheet.i.ls, fill=T, use.names = T)
#
stacked.sheets.ls[[i]]=stacked.sheet.i
}
names(stacked.sheets.ls)=sheet.names
all.colnames_sheet.i
sheet.i
stacked.sheets.ls$Recorrido_metadata %>% str()
stacked.sheets.ls$`Recorrido_plant data` %>% str()
stacked.sheets.ls$Samples_Bombus %>% str()
i=7
sheet.i=sheet.names[i] # hoja correspondiente
# lsita de esa hoja, con cada elemento viniendo de un collector diferente
sheet.i.ls=list()
coll.idx=1
for (j in 1:length(collector.codes)) { # para cada colector
# message(collector.codes[j])
excel.j_sheet.i=excel.ls[[j]][[sheet.i]] # tomamos la hoja i del colector j
if (!is.null(excel.j_sheet.i)) { # si la hoja i está en el archivo del colector j
excel.j_sheet.i=excel.j_sheet.i %>%
mutate(coll_id=collector.codes[j]) # agregamos un identificador
sheet.i.ls[[coll.idx]] = excel.j_sheet.i # y la agregamos a la lista de esa hoja
names(sheet.i.ls)[coll.idx]=collector.codes[j] # la nombramos
coll.idx=coll.idx+1
}
}
all.colnames_sheet.i=sheet.i.ls %>% lapply(colnames) %>% unlist() %>% unique()
colm.class.m=matrix(NA, ncol=length(collector.codes),
nrow=length(all.colnames_sheet.i)) %>%
`rownames<-`(all.colnames_sheet.i) %>%
`colnames<-`(collector.codes) %>%
as.data.frame()
for (k in 1:length(all.colnames_sheet.i)) { # para cada columna de la hoja i
for (j in 1:length(collector.codes)) { # nos fijamos la clase que esta tiene en el archivo j
if (all.colnames_sheet.i[k] %in% colnames(sheet.i.ls[[collector.codes[j]]]) ) {
sheet_i.j_k.column.class=
sheet.i.ls[[collector.codes[j]]][,all.colnames_sheet.i[k]] %>% class()
}else{
# print(paste0('no column ', all.colnames_sheet.i[k],
#       ' in sheet ', sheet.names[i], ' for collector ', collector.codes[j]))
sheet_i.j_k.column.class=NA
}
colm.class.m[all.colnames_sheet.i[k], collector.codes[j]]=sheet_i.j_k.column.class[1]
}
# sheet.i.ls %>%
#   lapply(as.data.frame) %>%
#   apply(FUN=dplyr::select(), 1)
# col.class=function(x, colname){
#   as.data.frame(x)
#   # return(x [,colname] %>%  class())
# }
#
# sheet.i.ls %>%
#   # lapply(colnames) %>%
#   lapply(col.class(x=.))
}
colm.class.m
k=1
colm.class.m[k,]
colm.class.m[k,-c('Coerced to')]
colm.class.m$`Coerced to`=NA
colm.class.m[k,-c('Coerced to')]
length(collector.codes)+1
knitr::opts_chunk$set(echo = F)
library(readxl) # read
library(xlsx) # write
library(tidyr)
library(dplyr)
library(ggplot2)
library(data.table) # rbindlist()
knitr::opts_chunk$set(echo = T, tidy=TRUE, tidy.opts=list(width.cutoff=30))
knitr::opts_chunk$set(echo = T, tidy=TRUE)
# exportamos cada lista a una tabla que va a estar un una hoja diferente de un mismo .xlsx
# primero borramos versiones anteriores
unlink('./Stacked_excel.xlsx', recursive = T)
help(write.xlsx)
